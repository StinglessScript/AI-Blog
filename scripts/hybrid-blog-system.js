// Hybrid system: Database for new posts + Static for performance
import dotenv from 'dotenv'
import { generateBlogPost } from './ai-auto-blog.js'

dotenv.config()

// 1. AI generates post
// 2. Save to database immediately (instant)
// 3. Background sync to static files (for SEO/performance)
// 4. Site shows database content for new posts, static for old posts

class HybridBlogSystem {
  constructor() {
    this.dbPosts = new Map() // In-memory cache
    this.staticPosts = new Map() // Static file cache
  }

  async generateAndSave() {
    console.log('🤖 Generating AI blog post...')
    
    // Generate with AI
    const blogData = await generateBlogPost()
    
    // Save to database immediately
    await this.saveToDatabase(blogData)
    console.log('✅ Saved to database instantly')
    
    // Queue for static file generation (background)
    await this.queueStaticGeneration(blogData)
    console.log('📝 Queued for static generation')
    
    return blogData
  }

  async saveToDatabase(postData) {
    // Mock database save - replace with real DB
    this.dbPosts.set(postData.slug, {
      ...postData,
      source: 'database',
      created_at: new Date().toISOString()
    })
  }

  async queueStaticGeneration(postData) {
    // Add to queue for background processing
    const queue = this.getQueue()
    queue.push(postData)
    
    // Process queue if not already processing
    if (!this.isProcessing) {
      this.processQueue()
    }
  }

  async processQueue() {
    this.isProcessing = true
    const queue = this.getQueue()
    
    while (queue.length > 0) {
      const postData = queue.shift()
      await this.generateStaticFile(postData)
      
      // Batch multiple posts into single commit
      if (queue.length === 0 || queue.length % 5 === 0) {
        await this.commitStaticFiles()
      }
    }
    
    this.isProcessing = false
  }

  async generateStaticFile(postData) {
    const year = new Date().getFullYear()
    const filePath = `content/posts/${year}/${postData.slug}.md`
    
    const frontmatter = `---
title: "${postData.title}"
description: "${postData.description}"
date: "${postData.date}"
updated: "${postData.date}"
categories: ["${postData.category}"]
tags: [${postData.tags.map(tag => `"${tag}"`).join(', ')}]
# Generated by AI (${postData.provider})
---

${postData.content}`

    // Write to file
    const fs = await import('node:fs')
    const path = await import('node:path')
    
    const directory = path.dirname(filePath)
    if (!fs.existsSync(directory)) {
      fs.mkdirSync(directory, { recursive: true })
    }
    
    fs.writeFileSync(filePath, frontmatter, 'utf8')
    console.log(`📄 Generated static file: ${filePath}`)
  }

  async commitStaticFiles() {
    const { exec } = await import('node:child_process')
    const { promisify } = await import('node:util')
    const execAsync = promisify(exec)
    
    try {
      await execAsync('git add content/posts/')
      await execAsync(`git commit -m "📚 Batch update: ${new Date().toISOString()}"`)
      console.log('✅ Committed static files')
    } catch (error) {
      console.log('ℹ️ No changes to commit')
    }
  }

  getQueue() {
    if (!this.queue) {
      this.queue = []
    }
    return this.queue
  }

  // Get posts from both sources
  async getAllPosts() {
    const dbPosts = Array.from(this.dbPosts.values())
    const staticPosts = Array.from(this.staticPosts.values())
    
    // Merge and deduplicate
    const allPosts = [...dbPosts, ...staticPosts]
    const uniquePosts = allPosts.reduce((acc, post) => {
      if (!acc.has(post.slug)) {
        acc.set(post.slug, post)
      }
      return acc
    }, new Map())
    
    return Array.from(uniquePosts.values())
      .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
  }
}

// Usage
const hybridSystem = new HybridBlogSystem()

async function main() {
  try {
    const post = await hybridSystem.generateAndSave()
    console.log('🎉 Post generated and saved!')
    console.log(`📝 Title: ${post.title}`)
    console.log(`🔗 Slug: ${post.slug}`)
  } catch (error) {
    console.error('❌ Error:', error.message)
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main()
}

export { HybridBlogSystem }
