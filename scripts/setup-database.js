// Quick database setup for AI blog posts
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseKey)

// Database schema
const createPostsTable = `
CREATE TABLE IF NOT EXISTS posts (
  id SERIAL PRIMARY KEY,
  title TEXT NOT NULL,
  slug TEXT UNIQUE NOT NULL,
  content TEXT NOT NULL,
  description TEXT,
  category TEXT,
  tags TEXT[],
  ai_provider TEXT,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  published BOOLEAN DEFAULT true
);

CREATE INDEX IF NOT EXISTS idx_posts_slug ON posts(slug);
CREATE INDEX IF NOT EXISTS idx_posts_created_at ON posts(created_at DESC);
`

// AI writes to database instead of files
export async function savePostToDatabase(postData) {
  const { data, error } = await supabase
    .from('posts')
    .insert([{
      title: postData.title,
      slug: postData.slug,
      content: postData.content,
      description: postData.description,
      category: postData.category,
      tags: postData.tags,
      ai_provider: postData.provider
    }])
    .select()

  if (error) throw error
  return data[0]
}

// Site reads from database
export async function getPostsFromDatabase(limit = 10) {
  const { data, error } = await supabase
    .from('posts')
    .select('*')
    .eq('published', true)
    .order('created_at', { ascending: false })
    .limit(limit)

  if (error) throw error
  return data
}

// Sync database to files (background job)
export async function syncDatabaseToFiles() {
  const posts = await getPostsFromDatabase(100)
  
  for (const post of posts) {
    const filePath = `content/posts/${new Date(post.created_at).getFullYear()}/${post.slug}.md`
    const frontmatter = `---
title: "${post.title}"
description: "${post.description}"
date: "${post.created_at}"
updated: "${post.updated_at}"
categories: ["${post.category}"]
tags: [${post.tags.map(tag => `"${tag}"`).join(', ')}]
# Generated by AI (${post.ai_provider})
---

${post.content}`

    // Write to file system
    await writeFile(filePath, frontmatter)
  }
}
